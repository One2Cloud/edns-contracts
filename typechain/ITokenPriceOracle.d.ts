/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface ITokenPriceOracleInterface extends ethers.utils.Interface {
  functions: {
    "getTokenPriceInUsd()": FunctionFragment;
    "requestTokenPriceInUsd()": FunctionFragment;
    "setApiUrl(string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getTokenPriceInUsd",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "requestTokenPriceInUsd",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "setApiUrl", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "getTokenPriceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "requestTokenPriceInUsd",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setApiUrl", data: BytesLike): Result;

  events: {
    "GetTokenPriceInUsd(bytes32,uint256)": EventFragment;
    "SetApiUrl(string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "GetTokenPriceInUsd"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SetApiUrl"): EventFragment;
}

export type GetTokenPriceInUsdEvent = TypedEvent<
  [string, BigNumber] & { requestId: string; amount: BigNumber }
>;

export type SetApiUrlEvent = TypedEvent<[string] & { url: string }>;

export class ITokenPriceOracle extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: ITokenPriceOracleInterface;

  functions: {
    getTokenPriceInUsd(overrides?: CallOverrides): Promise<[BigNumber]>;

    requestTokenPriceInUsd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setApiUrl(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getTokenPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

  requestTokenPriceInUsd(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setApiUrl(
    url: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getTokenPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    requestTokenPriceInUsd(overrides?: CallOverrides): Promise<void>;

    setApiUrl(url: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "GetTokenPriceInUsd(bytes32,uint256)"(
      requestId?: BytesLike | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { requestId: string; amount: BigNumber }
    >;

    GetTokenPriceInUsd(
      requestId?: BytesLike | null,
      amount?: null
    ): TypedEventFilter<
      [string, BigNumber],
      { requestId: string; amount: BigNumber }
    >;

    "SetApiUrl(string)"(
      url?: null
    ): TypedEventFilter<[string], { url: string }>;

    SetApiUrl(url?: null): TypedEventFilter<[string], { url: string }>;
  };

  estimateGas: {
    getTokenPriceInUsd(overrides?: CallOverrides): Promise<BigNumber>;

    requestTokenPriceInUsd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setApiUrl(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getTokenPriceInUsd(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    requestTokenPriceInUsd(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setApiUrl(
      url: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
