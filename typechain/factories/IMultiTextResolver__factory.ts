/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from "ethers";
import { Provider } from "@ethersproject/providers";
import type {
  IMultiTextResolver,
  IMultiTextResolverInterface,
} from "../IMultiTextResolver";

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "string",
        name: "type_",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "text",
        type: "string",
      },
    ],
    name: "SetMultiText",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "type_",
        type: "string",
      },
    ],
    name: "getMultiText",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "type_",
        type: "string",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
    ],
    name: "setMultiText",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes",
        name: "host",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "name",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "tld",
        type: "bytes",
      },
      {
        internalType: "string",
        name: "type_",
        type: "string",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
    ],
    name: "setMultiText_SYNC",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

export class IMultiTextResolver__factory {
  static readonly abi = _abi;
  static createInterface(): IMultiTextResolverInterface {
    return new utils.Interface(_abi) as IMultiTextResolverInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): IMultiTextResolver {
    return new Contract(address, _abi, signerOrProvider) as IMultiTextResolver;
  }
}
