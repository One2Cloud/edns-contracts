/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "AccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "AccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControlUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlEnumerableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable__factory>;
    getContractFactory(
      name: "IAccessControlUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControlUpgradeable__factory>;
    getContractFactory(
      name: "OwnableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnableUpgradeable__factory>;
    getContractFactory(
      name: "IERC1822ProxiableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1822ProxiableUpgradeable__factory>;
    getContractFactory(
      name: "IERC2981Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC2981Upgradeable__factory>;
    getContractFactory(
      name: "IBeaconUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IBeaconUpgradeable__factory>;
    getContractFactory(
      name: "ERC1967UpgradeUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC1967UpgradeUpgradeable__factory>;
    getContractFactory(
      name: "UUPSUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.UUPSUpgradeable__factory>;
    getContractFactory(
      name: "PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PausableUpgradeable__factory>;
    getContractFactory(
      name: "ReentrancyGuardUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReentrancyGuardUpgradeable__factory>;
    getContractFactory(
      name: "ERC2981Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC2981Upgradeable__factory>;
    getContractFactory(
      name: "IERC20PermitUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20PermitUpgradeable__factory>;
    getContractFactory(
      name: "IERC20Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Upgradeable__factory>;
    getContractFactory(
      name: "ERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC721PausableUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC721PausableUpgradeable__factory>;
    getContractFactory(
      name: "IERC721MetadataUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721MetadataUpgradeable__factory>;
    getContractFactory(
      name: "IERC721ReceiverUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721ReceiverUpgradeable__factory>;
    getContractFactory(
      name: "IERC721Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC721Upgradeable__factory>;
    getContractFactory(
      name: "ERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165Upgradeable__factory>;
    getContractFactory(
      name: "IERC165Upgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165Upgradeable__factory>;
    getContractFactory(
      name: "MulticallUpgradeable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MulticallUpgradeable__factory>;
    getContractFactory(
      name: "AccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AccessControl__factory>;
    getContractFactory(
      name: "IAccessControl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAccessControl__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Pausable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Pausable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Burnable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Burnable__factory>;
    getContractFactory(
      name: "IERC20Metadata",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Metadata__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC165__factory>;
    getContractFactory(
      name: "IERC165",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC165__factory>;
    getContractFactory(
      name: "Algorithm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Algorithm__factory>;
    getContractFactory(
      name: "DummyAlgorithm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyAlgorithm__factory>;
    getContractFactory(
      name: "P256SHA256Algorithm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.P256SHA256Algorithm__factory>;
    getContractFactory(
      name: "RSASHA1Algorithm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RSASHA1Algorithm__factory>;
    getContractFactory(
      name: "RSASHA256Algorithm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.RSASHA256Algorithm__factory>;
    getContractFactory(
      name: "Digest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Digest__factory>;
    getContractFactory(
      name: "DummyDigest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DummyDigest__factory>;
    getContractFactory(
      name: "SHA1Digest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SHA1Digest__factory>;
    getContractFactory(
      name: "SHA256Digest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SHA256Digest__factory>;
    getContractFactory(
      name: "DNSSEC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DNSSEC__factory>;
    getContractFactory(
      name: "DNSSECImpl",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DNSSECImpl__factory>;
    getContractFactory(
      name: "NSEC3Digest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NSEC3Digest__factory>;
    getContractFactory(
      name: "SHA1NSEC3Digest",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SHA1NSEC3Digest__factory>;
    getContractFactory(
      name: "Owned",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Owned__factory>;
    getContractFactory(
      name: "SHA1",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SHA1__factory>;
    getContractFactory(
      name: "BaseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistrar__factory>;
    getContractFactory(
      name: "BaseRegistrarImplementation",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BaseRegistrarImplementation__factory>;
    getContractFactory(
      name: "EDNSRegistrarController",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EDNSRegistrarController__factory>;
    getContractFactory(
      name: "EDNS",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EDNS__factory>;
    getContractFactory(
      name: "EDNSRegistry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.EDNSRegistry__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "ReverseRegistrar",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ReverseRegistrar__factory>;
    getContractFactory(
      name: "DefaultReverseResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DefaultReverseResolver__factory>;
    getContractFactory(
      name: "IMulticallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMulticallable__factory>;
    getContractFactory(
      name: "ISupportsInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ISupportsInterface__factory>;
    getContractFactory(
      name: "Multicallable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Multicallable__factory>;
    getContractFactory(
      name: "OwnedResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.OwnedResolver__factory>;
    getContractFactory(
      name: "ABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ABIResolver__factory>;
    getContractFactory(
      name: "AddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AddrResolver__factory>;
    getContractFactory(
      name: "ContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ContentHashResolver__factory>;
    getContractFactory(
      name: "DNSResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.DNSResolver__factory>;
    getContractFactory(
      name: "IABIResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IABIResolver__factory>;
    getContractFactory(
      name: "IAddressResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddressResolver__factory>;
    getContractFactory(
      name: "IAddrResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAddrResolver__factory>;
    getContractFactory(
      name: "IContentHashResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IContentHashResolver__factory>;
    getContractFactory(
      name: "IDNSRecordResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSRecordResolver__factory>;
    getContractFactory(
      name: "IDNSZoneResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IDNSZoneResolver__factory>;
    getContractFactory(
      name: "IInterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IInterfaceResolver__factory>;
    getContractFactory(
      name: "INameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameResolver__factory>;
    getContractFactory(
      name: "INFTResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INFTResolver__factory>;
    getContractFactory(
      name: "InterfaceResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.InterfaceResolver__factory>;
    getContractFactory(
      name: "IPubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPubkeyResolver__factory>;
    getContractFactory(
      name: "ITextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITextResolver__factory>;
    getContractFactory(
      name: "NameResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NameResolver__factory>;
    getContractFactory(
      name: "NFTResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.NFTResolver__factory>;
    getContractFactory(
      name: "PubkeyResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PubkeyResolver__factory>;
    getContractFactory(
      name: "TextResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.TextResolver__factory>;
    getContractFactory(
      name: "INameWrapper",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.INameWrapper__factory>;
    getContractFactory(
      name: "PublicResolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.PublicResolver__factory>;
    getContractFactory(
      name: "Resolver",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Resolver__factory>;
    getContractFactory(
      name: "ResolverBase",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ResolverBase__factory>;
    getContractFactory(
      name: "SupportsInterface",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SupportsInterface__factory>;
    getContractFactory(
      name: "AffiliateProgram",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.AffiliateProgram__factory>;
    getContractFactory(
      name: "IAffiliateProgram",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IAffiliateProgram__factory>;
    getContractFactory(
      name: "Controllable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Controllable__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "Root",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Root__factory>;

    getContractAt(
      name: "AccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "AccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControlUpgradeable>;
    getContractAt(
      name: "IAccessControlEnumerableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlEnumerableUpgradeable>;
    getContractAt(
      name: "IAccessControlUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControlUpgradeable>;
    getContractAt(
      name: "OwnableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnableUpgradeable>;
    getContractAt(
      name: "IERC1822ProxiableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1822ProxiableUpgradeable>;
    getContractAt(
      name: "IERC2981Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC2981Upgradeable>;
    getContractAt(
      name: "IBeaconUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IBeaconUpgradeable>;
    getContractAt(
      name: "ERC1967UpgradeUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC1967UpgradeUpgradeable>;
    getContractAt(
      name: "UUPSUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.UUPSUpgradeable>;
    getContractAt(
      name: "PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PausableUpgradeable>;
    getContractAt(
      name: "ReentrancyGuardUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReentrancyGuardUpgradeable>;
    getContractAt(
      name: "ERC2981Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC2981Upgradeable>;
    getContractAt(
      name: "IERC20PermitUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20PermitUpgradeable>;
    getContractAt(
      name: "IERC20Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Upgradeable>;
    getContractAt(
      name: "ERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721Upgradeable>;
    getContractAt(
      name: "ERC721PausableUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC721PausableUpgradeable>;
    getContractAt(
      name: "IERC721MetadataUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721MetadataUpgradeable>;
    getContractAt(
      name: "IERC721ReceiverUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721ReceiverUpgradeable>;
    getContractAt(
      name: "IERC721Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC721Upgradeable>;
    getContractAt(
      name: "ERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165Upgradeable>;
    getContractAt(
      name: "IERC165Upgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165Upgradeable>;
    getContractAt(
      name: "MulticallUpgradeable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MulticallUpgradeable>;
    getContractAt(
      name: "AccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AccessControl>;
    getContractAt(
      name: "IAccessControl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAccessControl>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Pausable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Pausable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Burnable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Burnable>;
    getContractAt(
      name: "IERC20Metadata",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Metadata>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC165>;
    getContractAt(
      name: "IERC165",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC165>;
    getContractAt(
      name: "Algorithm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Algorithm>;
    getContractAt(
      name: "DummyAlgorithm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyAlgorithm>;
    getContractAt(
      name: "P256SHA256Algorithm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.P256SHA256Algorithm>;
    getContractAt(
      name: "RSASHA1Algorithm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RSASHA1Algorithm>;
    getContractAt(
      name: "RSASHA256Algorithm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.RSASHA256Algorithm>;
    getContractAt(
      name: "Digest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Digest>;
    getContractAt(
      name: "DummyDigest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DummyDigest>;
    getContractAt(
      name: "SHA1Digest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SHA1Digest>;
    getContractAt(
      name: "SHA256Digest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SHA256Digest>;
    getContractAt(
      name: "DNSSEC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DNSSEC>;
    getContractAt(
      name: "DNSSECImpl",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DNSSECImpl>;
    getContractAt(
      name: "NSEC3Digest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NSEC3Digest>;
    getContractAt(
      name: "SHA1NSEC3Digest",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SHA1NSEC3Digest>;
    getContractAt(
      name: "Owned",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Owned>;
    getContractAt(
      name: "SHA1",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SHA1>;
    getContractAt(
      name: "BaseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistrar>;
    getContractAt(
      name: "BaseRegistrarImplementation",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BaseRegistrarImplementation>;
    getContractAt(
      name: "EDNSRegistrarController",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EDNSRegistrarController>;
    getContractAt(
      name: "EDNS",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EDNS>;
    getContractAt(
      name: "EDNSRegistry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.EDNSRegistry>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "ReverseRegistrar",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ReverseRegistrar>;
    getContractAt(
      name: "DefaultReverseResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DefaultReverseResolver>;
    getContractAt(
      name: "IMulticallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMulticallable>;
    getContractAt(
      name: "ISupportsInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ISupportsInterface>;
    getContractAt(
      name: "Multicallable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Multicallable>;
    getContractAt(
      name: "OwnedResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.OwnedResolver>;
    getContractAt(
      name: "ABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ABIResolver>;
    getContractAt(
      name: "AddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AddrResolver>;
    getContractAt(
      name: "ContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ContentHashResolver>;
    getContractAt(
      name: "DNSResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.DNSResolver>;
    getContractAt(
      name: "IABIResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IABIResolver>;
    getContractAt(
      name: "IAddressResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddressResolver>;
    getContractAt(
      name: "IAddrResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAddrResolver>;
    getContractAt(
      name: "IContentHashResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IContentHashResolver>;
    getContractAt(
      name: "IDNSRecordResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSRecordResolver>;
    getContractAt(
      name: "IDNSZoneResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IDNSZoneResolver>;
    getContractAt(
      name: "IInterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IInterfaceResolver>;
    getContractAt(
      name: "INameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameResolver>;
    getContractAt(
      name: "INFTResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INFTResolver>;
    getContractAt(
      name: "InterfaceResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.InterfaceResolver>;
    getContractAt(
      name: "IPubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPubkeyResolver>;
    getContractAt(
      name: "ITextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITextResolver>;
    getContractAt(
      name: "NameResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NameResolver>;
    getContractAt(
      name: "NFTResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.NFTResolver>;
    getContractAt(
      name: "PubkeyResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PubkeyResolver>;
    getContractAt(
      name: "TextResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.TextResolver>;
    getContractAt(
      name: "INameWrapper",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.INameWrapper>;
    getContractAt(
      name: "PublicResolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.PublicResolver>;
    getContractAt(
      name: "Resolver",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Resolver>;
    getContractAt(
      name: "ResolverBase",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ResolverBase>;
    getContractAt(
      name: "SupportsInterface",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SupportsInterface>;
    getContractAt(
      name: "AffiliateProgram",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.AffiliateProgram>;
    getContractAt(
      name: "IAffiliateProgram",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IAffiliateProgram>;
    getContractAt(
      name: "Controllable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Controllable>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "Root",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Root>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
