/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface IMultiTextResolverInterface extends ethers.utils.Interface {
  functions: {
    "getMultiText(bytes,bytes,bytes,string)": FunctionFragment;
    "setMultiText(bytes,bytes,bytes,string,string)": FunctionFragment;
    "setMultiText_SYNC(bytes,bytes,bytes,string,string)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "getMultiText",
    values: [BytesLike, BytesLike, BytesLike, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiText",
    values: [BytesLike, BytesLike, BytesLike, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "setMultiText_SYNC",
    values: [BytesLike, BytesLike, BytesLike, string, string]
  ): string;

  decodeFunctionResult(
    functionFragment: "getMultiText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiText",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setMultiText_SYNC",
    data: BytesLike
  ): Result;

  events: {
    "SetMultiText(bytes,bytes,bytes,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "SetMultiText"): EventFragment;
}

export type SetMultiTextEvent = TypedEvent<
  [string, string, string, string, string] & {
    host: string;
    name: string;
    tld: string;
    type_: string;
    text: string;
  }
>;

export class IMultiTextResolver extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: IMultiTextResolverInterface;

  functions: {
    getMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      overrides?: CallOverrides
    ): Promise<[string]>;

    setMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    setMultiText_SYNC(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  getMultiText(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    type_: string,
    overrides?: CallOverrides
  ): Promise<string>;

  setMultiText(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    type_: string,
    text: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  setMultiText_SYNC(
    host: BytesLike,
    name: BytesLike,
    tld: BytesLike,
    type_: string,
    text: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    getMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      overrides?: CallOverrides
    ): Promise<string>;

    setMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: CallOverrides
    ): Promise<void>;

    setMultiText_SYNC(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "SetMultiText(bytes,bytes,bytes,string,string)"(
      host?: null,
      name?: null,
      tld?: null,
      type_?: null,
      text?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { host: string; name: string; tld: string; type_: string; text: string }
    >;

    SetMultiText(
      host?: null,
      name?: null,
      tld?: null,
      type_?: null,
      text?: null
    ): TypedEventFilter<
      [string, string, string, string, string],
      { host: string; name: string; tld: string; type_: string; text: string }
    >;
  };

  estimateGas: {
    getMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    setMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    setMultiText_SYNC(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    getMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    setMultiText(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    setMultiText_SYNC(
      host: BytesLike,
      name: BytesLike,
      tld: BytesLike,
      type_: string,
      text: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
